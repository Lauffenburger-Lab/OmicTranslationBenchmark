library(tidyverse)
library(gg3D)
library(ggpubr)
#Process function to add condition ids and duplicate ids
process_embeddings <- function(embbedings,dataInfo,sampleInfo){
dataInfo <- dataInfo %>% select(sig_id,cmap_name,duplIdentifier) %>% unique()
sampleInfo <- suppressMessages(left_join(sampleInfo,dataInfo))
embbedings <- embbedings %>% rownames_to_column('sig_id')
embs_processed <- suppressMessages(left_join(embbedings,sampleInfo))
return(embs_processed)
}
samples_separation <- function(processed_embbedings,save_name,
compare_level=c('duplicates',
'equivalent condition',
'cell',
'drug',
'cell-drug'),
metric=c("euclidean", "maximum", "manhattan",
"canberra", "binary","cosine"),
show_plot=TRUE){
library(tidyverse)
embs <- processed_embbedings %>% column_to_rownames('sig_id') %>%
select(-conditionId,-duplIdentifier,-cell_iname,-cmap_name)
sample_info <- processed_embbedings %>% select(sig_id,conditionId,duplIdentifier,cell_iname,cmap_name)
# calculate distance matrix
if (metric=='cosine'){
library(lsa)
mat <- t(embs)
dist <- 1 - suppressMessages(cosine(mat))
} else{
dist <- as.matrix(dist(embs, method = metric))
}
# Conver to long format data frame
# Keep only unique (non-self) pairs
dist[lower.tri(dist,diag = T)] <- NA
dist <- reshape2::melt(dist)
dist <- dist %>% filter(!is.na(value))
# Merge meta-data info and distances values
dist <- suppressMessages(left_join(dist,sample_info,by = c("Var1"="sig_id")))
dist <- suppressMessages(left_join(dist,sample_info,by = c("Var2"="sig_id")))
dist <- dist %>% filter(!is.na(value))
if (compare_level=='duplicates'){
dist <- dist %>% mutate(is_same = (duplIdentifier.x==duplIdentifier.y))
label <- 'Duplicate Signatures'
}else if (compare_level=='equivalent condition'){
dist <- dist %>% mutate(is_same = (conditionId.x==conditionId.y))
label <- 'Same condition in different cell-line'
}else if (compare_level=='cell'){
dist <- dist %>% mutate(is_same = (cell_iname.x==cell_iname.y))
label <- 'Same cell-line'
}else if (compare_level=='drug'){
dist <- dist %>% mutate(is_same = (cmap_name.x==cmap_name.y))
label <- 'Same drug'
} else if (compare_level=='cell-drug'){
dist <- dist %>% mutate(is_same = (paste0(cmap_name.x,cell_iname.x)==paste0(cmap_name.y,cell_iname.y)))
label <- 'Same drug,same cell-line'
}
dist <-dist %>% mutate(is_same=ifelse(is_same==T,
label,'Random Signatures')) %>%
mutate(is_same = factor(is_same,
levels = c('Random Signatures',
label)))
p <- ggplot(dist,aes(x=value,color=is_same,fill=is_same)) +
geom_density(alpha=0.2) +
labs(col = 'Type',fill='Type',title="Distance distribution in the latent space",x=paste0(metric,' distance'), y = "Density")+
theme_classic() + theme(text = element_text(size=10),plot.title = element_text(hjust = 0.5))
# png(paste0(save_name,'_',compare_level,'_seperation_latent_space.png'),width=12,height=8,units = "in",res=600)
# print(p)
# dev.off()
if (show_plot==T){
print(p)
}
return(dist)
}
# Load samples info
sigInfo <- read.delim('../../../L1000_2021_11_23/siginfo_beta.txt')
sigInfo <- sigInfo %>% mutate(quality_replicates = ifelse(is_exemplar_sig==1 & qc_pass==1 & nsample>=3,1,0))
sigInfo <- sigInfo %>% filter(pert_type=='trt_cp')
sigInfo <- sigInfo %>% filter(quality_replicates==1)
# Filter based on TAS
sigInfo <- sigInfo %>% filter(tas>=0.3)
# Duplicate information
sigInfo <- sigInfo %>% mutate(duplIdentifier = paste0(cmap_name,"_",pert_idose,"_",pert_itime,"_",cell_iname))
sigInfo <- sigInfo %>% group_by(duplIdentifier) %>% mutate(dupl_counts = n()) %>% ungroup()
# Drug condition information
sigInfo <- sigInfo  %>% mutate(conditionId = paste0(cmap_name,"_",pert_idose,"_",pert_itime))
### Normal global space--------------------------------------------------------
plotList <- NULL
distrList <- NULL
df_effsize <- data.frame()
